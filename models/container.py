# -*- coding: utf-8 -*-

from openerp import models, fields, api

from openerp.addons.price_list.models.product import exc_prod

class Container(models.Model):

	_name = 'clean.container'



# ----------------------------------------------------------- Reproduce Errors ------------------------

	name = fields.Char()

	limit = fields.Integer()





# ----------------------------------------------------------- Reproduce Errors ------------------------
	@api.multi
	def reproduce_encode_error(self):
		"""
		Reproduce an Error.
		Error generated by Spanish alphabet differences.
		Only produced on Proliants.
		"""
		print()
		print('Encode Error')

		name = "ECOGRAFIAS MUSCULOESQUELETICAS - Mu√±eca (Unilateral) - 1 sesion"
		print(name)



# ----------------------------------------------------------- Fix ------------------------

	@api.multi
	def fix_procurements(self):
		"""
		Fix Procurements
		Set State to Cancel, for manual cancellation.
		"""
		print()
		print('Fix procurement orders')

		print(self.limit)

		procs = self.env['procurement.order'].search([
															#('type', 'in', ['product']),
															#('sale_ok', 'in', [True]),
												],
													#order='name asc',
													#limit=1,
													limit=self.limit,
												)

		count = 0
		for procurement in procs:
			#print()
			#print(procurement)
			#print(procurement.name)
			#print(procurement.state)
			#procurement.unlink()
			procurement.state = 'cancel'
		
			count = count + 1

			print(count)


		print('Finished !')

	# fix_procurements




	@api.multi
	def fix_stock(self):
		"""
		Fix stock moves
		Set State to Cancel, for manual cancellation.
		"""
		print('Fix stock moves')

		print(self.limit)

		# Search
		moves = self.env['stock.move'].search([
													#('x_name_short', 'in', [name]),
												],
												#order='date_begin asc',
												#limit=10,
												limit=self.limit,
											)
		count = 0
		for stock_move in moves:
			#print()
			#print(stock_move)
			#print(stock_move.name)
			#print(stock_move.state)
			#stock_move.unlink()
			stock_move.state = 'cancel'

			count = count + 1

			print(count)


		print('Finished !')

	# fix_stock_moves


# ----------------------------------------------------------- Validate All Product Templates ---------------------------------------------

	@api.multi
	def validate_product_templates(self):

		"""
		Validate All 2019 Product Templates
		"""
		print()
		print('Product Validate Product Templates')


		# Search All 2019
		products = self.env['product.template'].search([
																	('pl_price_list', 'in', ['2019']),
															],
															order='pl_prefix asc',
															limit=1000,
														)
		# Loop
		count = 0
		for product in products:
			print()
			print(product.name)
			
			#sys_func.print_x(product.name)

			count = count + 1

			# Handle Exceptions
			exc_prod.handle_exceptions(product)

		print(count)


	# validate_product_templates


